// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bbedward/gocron-ent-lock/v2/ent/cronjoblock"
)

// CronJobLock is the model entity for the CronJobLock schema.
type CronJobLock struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// JobName holds the value of the "job_name" field.
	JobName string `json:"job_name,omitempty"`
	// JobIdentifier holds the value of the "job_identifier" field.
	JobIdentifier string `json:"job_identifier,omitempty"`
	// Worker holds the value of the "worker" field.
	Worker string `json:"worker,omitempty"`
	// Status holds the value of the "status" field.
	Status       string `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CronJobLock) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cronjoblock.FieldID:
			values[i] = new(sql.NullInt64)
		case cronjoblock.FieldJobName, cronjoblock.FieldJobIdentifier, cronjoblock.FieldWorker, cronjoblock.FieldStatus:
			values[i] = new(sql.NullString)
		case cronjoblock.FieldCreatedAt, cronjoblock.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CronJobLock fields.
func (cjl *CronJobLock) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cronjoblock.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cjl.ID = int(value.Int64)
		case cronjoblock.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cjl.CreatedAt = value.Time
			}
		case cronjoblock.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cjl.UpdatedAt = value.Time
			}
		case cronjoblock.FieldJobName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_name", values[i])
			} else if value.Valid {
				cjl.JobName = value.String
			}
		case cronjoblock.FieldJobIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job_identifier", values[i])
			} else if value.Valid {
				cjl.JobIdentifier = value.String
			}
		case cronjoblock.FieldWorker:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field worker", values[i])
			} else if value.Valid {
				cjl.Worker = value.String
			}
		case cronjoblock.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				cjl.Status = value.String
			}
		default:
			cjl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CronJobLock.
// This includes values selected through modifiers, order, etc.
func (cjl *CronJobLock) Value(name string) (ent.Value, error) {
	return cjl.selectValues.Get(name)
}

// Update returns a builder for updating this CronJobLock.
// Note that you need to call CronJobLock.Unwrap() before calling this method if this CronJobLock
// was returned from a transaction, and the transaction was committed or rolled back.
func (cjl *CronJobLock) Update() *CronJobLockUpdateOne {
	return NewCronJobLockClient(cjl.config).UpdateOne(cjl)
}

// Unwrap unwraps the CronJobLock entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cjl *CronJobLock) Unwrap() *CronJobLock {
	_tx, ok := cjl.config.driver.(*txDriver)
	if !ok {
		panic("ent: CronJobLock is not a transactional entity")
	}
	cjl.config.driver = _tx.drv
	return cjl
}

// String implements the fmt.Stringer.
func (cjl *CronJobLock) String() string {
	var builder strings.Builder
	builder.WriteString("CronJobLock(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cjl.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cjl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cjl.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("job_name=")
	builder.WriteString(cjl.JobName)
	builder.WriteString(", ")
	builder.WriteString("job_identifier=")
	builder.WriteString(cjl.JobIdentifier)
	builder.WriteString(", ")
	builder.WriteString("worker=")
	builder.WriteString(cjl.Worker)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(cjl.Status)
	builder.WriteByte(')')
	return builder.String()
}

// CronJobLocks is a parsable slice of CronJobLock.
type CronJobLocks []*CronJobLock
