// Code generated by ent, DO NOT EDIT.

package cronjoblock

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the cronjoblock type in the database.
	Label = "cron_job_lock"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldJobName holds the string denoting the job_name field in the database.
	FieldJobName = "job_name"
	// FieldJobIdentifier holds the string denoting the job_identifier field in the database.
	FieldJobIdentifier = "job_identifier"
	// FieldWorker holds the string denoting the worker field in the database.
	FieldWorker = "worker"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// Table holds the table name of the cronjoblock in the database.
	Table = "cron_job_locks"
)

// Columns holds all SQL columns for cronjoblock fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldJobName,
	FieldJobIdentifier,
	FieldWorker,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// JobNameValidator is a validator for the "job_name" field. It is called by the builders before save.
	JobNameValidator func(string) error
	// JobIdentifierValidator is a validator for the "job_identifier" field. It is called by the builders before save.
	JobIdentifierValidator func(string) error
	// WorkerValidator is a validator for the "worker" field. It is called by the builders before save.
	WorkerValidator func(string) error
	// StatusValidator is a validator for the "status" field. It is called by the builders before save.
	StatusValidator func(string) error
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(int) error
)

// OrderOption defines the ordering options for the CronJobLock queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByJobName orders the results by the job_name field.
func ByJobName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobName, opts...).ToFunc()
}

// ByJobIdentifier orders the results by the job_identifier field.
func ByJobIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJobIdentifier, opts...).ToFunc()
}

// ByWorker orders the results by the worker field.
func ByWorker(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorker, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}
