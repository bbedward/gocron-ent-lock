// Code generated by ent, DO NOT EDIT.

package cronjoblock

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/bbedward/gocron-ent-lock/v2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldUpdatedAt, v))
}

// JobName applies equality check predicate on the "job_name" field. It's identical to JobNameEQ.
func JobName(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldJobName, v))
}

// JobIdentifier applies equality check predicate on the "job_identifier" field. It's identical to JobIdentifierEQ.
func JobIdentifier(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldJobIdentifier, v))
}

// Worker applies equality check predicate on the "worker" field. It's identical to WorkerEQ.
func Worker(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldWorker, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLTE(FieldUpdatedAt, v))
}

// JobNameEQ applies the EQ predicate on the "job_name" field.
func JobNameEQ(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldJobName, v))
}

// JobNameNEQ applies the NEQ predicate on the "job_name" field.
func JobNameNEQ(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNEQ(FieldJobName, v))
}

// JobNameIn applies the In predicate on the "job_name" field.
func JobNameIn(vs ...string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldIn(FieldJobName, vs...))
}

// JobNameNotIn applies the NotIn predicate on the "job_name" field.
func JobNameNotIn(vs ...string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNotIn(FieldJobName, vs...))
}

// JobNameGT applies the GT predicate on the "job_name" field.
func JobNameGT(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGT(FieldJobName, v))
}

// JobNameGTE applies the GTE predicate on the "job_name" field.
func JobNameGTE(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGTE(FieldJobName, v))
}

// JobNameLT applies the LT predicate on the "job_name" field.
func JobNameLT(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLT(FieldJobName, v))
}

// JobNameLTE applies the LTE predicate on the "job_name" field.
func JobNameLTE(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLTE(FieldJobName, v))
}

// JobNameContains applies the Contains predicate on the "job_name" field.
func JobNameContains(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldContains(FieldJobName, v))
}

// JobNameHasPrefix applies the HasPrefix predicate on the "job_name" field.
func JobNameHasPrefix(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldHasPrefix(FieldJobName, v))
}

// JobNameHasSuffix applies the HasSuffix predicate on the "job_name" field.
func JobNameHasSuffix(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldHasSuffix(FieldJobName, v))
}

// JobNameEqualFold applies the EqualFold predicate on the "job_name" field.
func JobNameEqualFold(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEqualFold(FieldJobName, v))
}

// JobNameContainsFold applies the ContainsFold predicate on the "job_name" field.
func JobNameContainsFold(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldContainsFold(FieldJobName, v))
}

// JobIdentifierEQ applies the EQ predicate on the "job_identifier" field.
func JobIdentifierEQ(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldJobIdentifier, v))
}

// JobIdentifierNEQ applies the NEQ predicate on the "job_identifier" field.
func JobIdentifierNEQ(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNEQ(FieldJobIdentifier, v))
}

// JobIdentifierIn applies the In predicate on the "job_identifier" field.
func JobIdentifierIn(vs ...string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldIn(FieldJobIdentifier, vs...))
}

// JobIdentifierNotIn applies the NotIn predicate on the "job_identifier" field.
func JobIdentifierNotIn(vs ...string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNotIn(FieldJobIdentifier, vs...))
}

// JobIdentifierGT applies the GT predicate on the "job_identifier" field.
func JobIdentifierGT(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGT(FieldJobIdentifier, v))
}

// JobIdentifierGTE applies the GTE predicate on the "job_identifier" field.
func JobIdentifierGTE(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGTE(FieldJobIdentifier, v))
}

// JobIdentifierLT applies the LT predicate on the "job_identifier" field.
func JobIdentifierLT(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLT(FieldJobIdentifier, v))
}

// JobIdentifierLTE applies the LTE predicate on the "job_identifier" field.
func JobIdentifierLTE(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLTE(FieldJobIdentifier, v))
}

// JobIdentifierContains applies the Contains predicate on the "job_identifier" field.
func JobIdentifierContains(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldContains(FieldJobIdentifier, v))
}

// JobIdentifierHasPrefix applies the HasPrefix predicate on the "job_identifier" field.
func JobIdentifierHasPrefix(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldHasPrefix(FieldJobIdentifier, v))
}

// JobIdentifierHasSuffix applies the HasSuffix predicate on the "job_identifier" field.
func JobIdentifierHasSuffix(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldHasSuffix(FieldJobIdentifier, v))
}

// JobIdentifierEqualFold applies the EqualFold predicate on the "job_identifier" field.
func JobIdentifierEqualFold(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEqualFold(FieldJobIdentifier, v))
}

// JobIdentifierContainsFold applies the ContainsFold predicate on the "job_identifier" field.
func JobIdentifierContainsFold(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldContainsFold(FieldJobIdentifier, v))
}

// WorkerEQ applies the EQ predicate on the "worker" field.
func WorkerEQ(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldWorker, v))
}

// WorkerNEQ applies the NEQ predicate on the "worker" field.
func WorkerNEQ(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNEQ(FieldWorker, v))
}

// WorkerIn applies the In predicate on the "worker" field.
func WorkerIn(vs ...string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldIn(FieldWorker, vs...))
}

// WorkerNotIn applies the NotIn predicate on the "worker" field.
func WorkerNotIn(vs ...string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNotIn(FieldWorker, vs...))
}

// WorkerGT applies the GT predicate on the "worker" field.
func WorkerGT(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGT(FieldWorker, v))
}

// WorkerGTE applies the GTE predicate on the "worker" field.
func WorkerGTE(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGTE(FieldWorker, v))
}

// WorkerLT applies the LT predicate on the "worker" field.
func WorkerLT(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLT(FieldWorker, v))
}

// WorkerLTE applies the LTE predicate on the "worker" field.
func WorkerLTE(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLTE(FieldWorker, v))
}

// WorkerContains applies the Contains predicate on the "worker" field.
func WorkerContains(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldContains(FieldWorker, v))
}

// WorkerHasPrefix applies the HasPrefix predicate on the "worker" field.
func WorkerHasPrefix(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldHasPrefix(FieldWorker, v))
}

// WorkerHasSuffix applies the HasSuffix predicate on the "worker" field.
func WorkerHasSuffix(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldHasSuffix(FieldWorker, v))
}

// WorkerEqualFold applies the EqualFold predicate on the "worker" field.
func WorkerEqualFold(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEqualFold(FieldWorker, v))
}

// WorkerContainsFold applies the ContainsFold predicate on the "worker" field.
func WorkerContainsFold(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldContainsFold(FieldWorker, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.CronJobLock {
	return predicate.CronJobLock(sql.FieldContainsFold(FieldStatus, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CronJobLock) predicate.CronJobLock {
	return predicate.CronJobLock(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CronJobLock) predicate.CronJobLock {
	return predicate.CronJobLock(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CronJobLock) predicate.CronJobLock {
	return predicate.CronJobLock(sql.NotPredicates(p))
}
