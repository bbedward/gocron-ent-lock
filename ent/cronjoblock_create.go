// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bbedward/gocron-ent-lock/v2/ent/cronjoblock"
)

// CronJobLockCreate is the builder for creating a CronJobLock entity.
type CronJobLockCreate struct {
	config
	mutation *CronJobLockMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cjlc *CronJobLockCreate) SetCreatedAt(t time.Time) *CronJobLockCreate {
	cjlc.mutation.SetCreatedAt(t)
	return cjlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cjlc *CronJobLockCreate) SetNillableCreatedAt(t *time.Time) *CronJobLockCreate {
	if t != nil {
		cjlc.SetCreatedAt(*t)
	}
	return cjlc
}

// SetUpdatedAt sets the "updated_at" field.
func (cjlc *CronJobLockCreate) SetUpdatedAt(t time.Time) *CronJobLockCreate {
	cjlc.mutation.SetUpdatedAt(t)
	return cjlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cjlc *CronJobLockCreate) SetNillableUpdatedAt(t *time.Time) *CronJobLockCreate {
	if t != nil {
		cjlc.SetUpdatedAt(*t)
	}
	return cjlc
}

// SetJobName sets the "job_name" field.
func (cjlc *CronJobLockCreate) SetJobName(s string) *CronJobLockCreate {
	cjlc.mutation.SetJobName(s)
	return cjlc
}

// SetJobIdentifier sets the "job_identifier" field.
func (cjlc *CronJobLockCreate) SetJobIdentifier(s string) *CronJobLockCreate {
	cjlc.mutation.SetJobIdentifier(s)
	return cjlc
}

// SetWorker sets the "worker" field.
func (cjlc *CronJobLockCreate) SetWorker(s string) *CronJobLockCreate {
	cjlc.mutation.SetWorker(s)
	return cjlc
}

// SetStatus sets the "status" field.
func (cjlc *CronJobLockCreate) SetStatus(s string) *CronJobLockCreate {
	cjlc.mutation.SetStatus(s)
	return cjlc
}

// SetID sets the "id" field.
func (cjlc *CronJobLockCreate) SetID(i int) *CronJobLockCreate {
	cjlc.mutation.SetID(i)
	return cjlc
}

// Mutation returns the CronJobLockMutation object of the builder.
func (cjlc *CronJobLockCreate) Mutation() *CronJobLockMutation {
	return cjlc.mutation
}

// Save creates the CronJobLock in the database.
func (cjlc *CronJobLockCreate) Save(ctx context.Context) (*CronJobLock, error) {
	cjlc.defaults()
	return withHooks(ctx, cjlc.sqlSave, cjlc.mutation, cjlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cjlc *CronJobLockCreate) SaveX(ctx context.Context) *CronJobLock {
	v, err := cjlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cjlc *CronJobLockCreate) Exec(ctx context.Context) error {
	_, err := cjlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjlc *CronJobLockCreate) ExecX(ctx context.Context) {
	if err := cjlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cjlc *CronJobLockCreate) defaults() {
	if _, ok := cjlc.mutation.CreatedAt(); !ok {
		v := cronjoblock.DefaultCreatedAt()
		cjlc.mutation.SetCreatedAt(v)
	}
	if _, ok := cjlc.mutation.UpdatedAt(); !ok {
		v := cronjoblock.DefaultUpdatedAt()
		cjlc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cjlc *CronJobLockCreate) check() error {
	if _, ok := cjlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CronJobLock.created_at"`)}
	}
	if _, ok := cjlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CronJobLock.updated_at"`)}
	}
	if _, ok := cjlc.mutation.JobName(); !ok {
		return &ValidationError{Name: "job_name", err: errors.New(`ent: missing required field "CronJobLock.job_name"`)}
	}
	if v, ok := cjlc.mutation.JobName(); ok {
		if err := cronjoblock.JobNameValidator(v); err != nil {
			return &ValidationError{Name: "job_name", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.job_name": %w`, err)}
		}
	}
	if _, ok := cjlc.mutation.JobIdentifier(); !ok {
		return &ValidationError{Name: "job_identifier", err: errors.New(`ent: missing required field "CronJobLock.job_identifier"`)}
	}
	if v, ok := cjlc.mutation.JobIdentifier(); ok {
		if err := cronjoblock.JobIdentifierValidator(v); err != nil {
			return &ValidationError{Name: "job_identifier", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.job_identifier": %w`, err)}
		}
	}
	if _, ok := cjlc.mutation.Worker(); !ok {
		return &ValidationError{Name: "worker", err: errors.New(`ent: missing required field "CronJobLock.worker"`)}
	}
	if v, ok := cjlc.mutation.Worker(); ok {
		if err := cronjoblock.WorkerValidator(v); err != nil {
			return &ValidationError{Name: "worker", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.worker": %w`, err)}
		}
	}
	if _, ok := cjlc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "CronJobLock.status"`)}
	}
	if v, ok := cjlc.mutation.Status(); ok {
		if err := cronjoblock.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.status": %w`, err)}
		}
	}
	if v, ok := cjlc.mutation.ID(); ok {
		if err := cronjoblock.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.id": %w`, err)}
		}
	}
	return nil
}

func (cjlc *CronJobLockCreate) sqlSave(ctx context.Context) (*CronJobLock, error) {
	if err := cjlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cjlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cjlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	cjlc.mutation.id = &_node.ID
	cjlc.mutation.done = true
	return _node, nil
}

func (cjlc *CronJobLockCreate) createSpec() (*CronJobLock, *sqlgraph.CreateSpec) {
	var (
		_node = &CronJobLock{config: cjlc.config}
		_spec = sqlgraph.NewCreateSpec(cronjoblock.Table, sqlgraph.NewFieldSpec(cronjoblock.FieldID, field.TypeInt))
	)
	_spec.OnConflict = cjlc.conflict
	if id, ok := cjlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cjlc.mutation.CreatedAt(); ok {
		_spec.SetField(cronjoblock.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cjlc.mutation.UpdatedAt(); ok {
		_spec.SetField(cronjoblock.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cjlc.mutation.JobName(); ok {
		_spec.SetField(cronjoblock.FieldJobName, field.TypeString, value)
		_node.JobName = value
	}
	if value, ok := cjlc.mutation.JobIdentifier(); ok {
		_spec.SetField(cronjoblock.FieldJobIdentifier, field.TypeString, value)
		_node.JobIdentifier = value
	}
	if value, ok := cjlc.mutation.Worker(); ok {
		_spec.SetField(cronjoblock.FieldWorker, field.TypeString, value)
		_node.Worker = value
	}
	if value, ok := cjlc.mutation.Status(); ok {
		_spec.SetField(cronjoblock.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CronJobLock.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CronJobLockUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cjlc *CronJobLockCreate) OnConflict(opts ...sql.ConflictOption) *CronJobLockUpsertOne {
	cjlc.conflict = opts
	return &CronJobLockUpsertOne{
		create: cjlc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CronJobLock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cjlc *CronJobLockCreate) OnConflictColumns(columns ...string) *CronJobLockUpsertOne {
	cjlc.conflict = append(cjlc.conflict, sql.ConflictColumns(columns...))
	return &CronJobLockUpsertOne{
		create: cjlc,
	}
}

type (
	// CronJobLockUpsertOne is the builder for "upsert"-ing
	//  one CronJobLock node.
	CronJobLockUpsertOne struct {
		create *CronJobLockCreate
	}

	// CronJobLockUpsert is the "OnConflict" setter.
	CronJobLockUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CronJobLockUpsert) SetUpdatedAt(v time.Time) *CronJobLockUpsert {
	u.Set(cronjoblock.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CronJobLockUpsert) UpdateUpdatedAt() *CronJobLockUpsert {
	u.SetExcluded(cronjoblock.FieldUpdatedAt)
	return u
}

// SetJobName sets the "job_name" field.
func (u *CronJobLockUpsert) SetJobName(v string) *CronJobLockUpsert {
	u.Set(cronjoblock.FieldJobName, v)
	return u
}

// UpdateJobName sets the "job_name" field to the value that was provided on create.
func (u *CronJobLockUpsert) UpdateJobName() *CronJobLockUpsert {
	u.SetExcluded(cronjoblock.FieldJobName)
	return u
}

// SetJobIdentifier sets the "job_identifier" field.
func (u *CronJobLockUpsert) SetJobIdentifier(v string) *CronJobLockUpsert {
	u.Set(cronjoblock.FieldJobIdentifier, v)
	return u
}

// UpdateJobIdentifier sets the "job_identifier" field to the value that was provided on create.
func (u *CronJobLockUpsert) UpdateJobIdentifier() *CronJobLockUpsert {
	u.SetExcluded(cronjoblock.FieldJobIdentifier)
	return u
}

// SetWorker sets the "worker" field.
func (u *CronJobLockUpsert) SetWorker(v string) *CronJobLockUpsert {
	u.Set(cronjoblock.FieldWorker, v)
	return u
}

// UpdateWorker sets the "worker" field to the value that was provided on create.
func (u *CronJobLockUpsert) UpdateWorker() *CronJobLockUpsert {
	u.SetExcluded(cronjoblock.FieldWorker)
	return u
}

// SetStatus sets the "status" field.
func (u *CronJobLockUpsert) SetStatus(v string) *CronJobLockUpsert {
	u.Set(cronjoblock.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CronJobLockUpsert) UpdateStatus() *CronJobLockUpsert {
	u.SetExcluded(cronjoblock.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.CronJobLock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cronjoblock.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CronJobLockUpsertOne) UpdateNewValues() *CronJobLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(cronjoblock.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(cronjoblock.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CronJobLock.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CronJobLockUpsertOne) Ignore() *CronJobLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CronJobLockUpsertOne) DoNothing() *CronJobLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CronJobLockCreate.OnConflict
// documentation for more info.
func (u *CronJobLockUpsertOne) Update(set func(*CronJobLockUpsert)) *CronJobLockUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CronJobLockUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CronJobLockUpsertOne) SetUpdatedAt(v time.Time) *CronJobLockUpsertOne {
	return u.Update(func(s *CronJobLockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CronJobLockUpsertOne) UpdateUpdatedAt() *CronJobLockUpsertOne {
	return u.Update(func(s *CronJobLockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetJobName sets the "job_name" field.
func (u *CronJobLockUpsertOne) SetJobName(v string) *CronJobLockUpsertOne {
	return u.Update(func(s *CronJobLockUpsert) {
		s.SetJobName(v)
	})
}

// UpdateJobName sets the "job_name" field to the value that was provided on create.
func (u *CronJobLockUpsertOne) UpdateJobName() *CronJobLockUpsertOne {
	return u.Update(func(s *CronJobLockUpsert) {
		s.UpdateJobName()
	})
}

// SetJobIdentifier sets the "job_identifier" field.
func (u *CronJobLockUpsertOne) SetJobIdentifier(v string) *CronJobLockUpsertOne {
	return u.Update(func(s *CronJobLockUpsert) {
		s.SetJobIdentifier(v)
	})
}

// UpdateJobIdentifier sets the "job_identifier" field to the value that was provided on create.
func (u *CronJobLockUpsertOne) UpdateJobIdentifier() *CronJobLockUpsertOne {
	return u.Update(func(s *CronJobLockUpsert) {
		s.UpdateJobIdentifier()
	})
}

// SetWorker sets the "worker" field.
func (u *CronJobLockUpsertOne) SetWorker(v string) *CronJobLockUpsertOne {
	return u.Update(func(s *CronJobLockUpsert) {
		s.SetWorker(v)
	})
}

// UpdateWorker sets the "worker" field to the value that was provided on create.
func (u *CronJobLockUpsertOne) UpdateWorker() *CronJobLockUpsertOne {
	return u.Update(func(s *CronJobLockUpsert) {
		s.UpdateWorker()
	})
}

// SetStatus sets the "status" field.
func (u *CronJobLockUpsertOne) SetStatus(v string) *CronJobLockUpsertOne {
	return u.Update(func(s *CronJobLockUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CronJobLockUpsertOne) UpdateStatus() *CronJobLockUpsertOne {
	return u.Update(func(s *CronJobLockUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *CronJobLockUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CronJobLockCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CronJobLockUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CronJobLockUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CronJobLockUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CronJobLockCreateBulk is the builder for creating many CronJobLock entities in bulk.
type CronJobLockCreateBulk struct {
	config
	err      error
	builders []*CronJobLockCreate
	conflict []sql.ConflictOption
}

// Save creates the CronJobLock entities in the database.
func (cjlcb *CronJobLockCreateBulk) Save(ctx context.Context) ([]*CronJobLock, error) {
	if cjlcb.err != nil {
		return nil, cjlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cjlcb.builders))
	nodes := make([]*CronJobLock, len(cjlcb.builders))
	mutators := make([]Mutator, len(cjlcb.builders))
	for i := range cjlcb.builders {
		func(i int, root context.Context) {
			builder := cjlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CronJobLockMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cjlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cjlcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cjlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cjlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cjlcb *CronJobLockCreateBulk) SaveX(ctx context.Context) []*CronJobLock {
	v, err := cjlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cjlcb *CronJobLockCreateBulk) Exec(ctx context.Context) error {
	_, err := cjlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjlcb *CronJobLockCreateBulk) ExecX(ctx context.Context) {
	if err := cjlcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CronJobLock.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CronJobLockUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cjlcb *CronJobLockCreateBulk) OnConflict(opts ...sql.ConflictOption) *CronJobLockUpsertBulk {
	cjlcb.conflict = opts
	return &CronJobLockUpsertBulk{
		create: cjlcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CronJobLock.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cjlcb *CronJobLockCreateBulk) OnConflictColumns(columns ...string) *CronJobLockUpsertBulk {
	cjlcb.conflict = append(cjlcb.conflict, sql.ConflictColumns(columns...))
	return &CronJobLockUpsertBulk{
		create: cjlcb,
	}
}

// CronJobLockUpsertBulk is the builder for "upsert"-ing
// a bulk of CronJobLock nodes.
type CronJobLockUpsertBulk struct {
	create *CronJobLockCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CronJobLock.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(cronjoblock.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CronJobLockUpsertBulk) UpdateNewValues() *CronJobLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(cronjoblock.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(cronjoblock.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CronJobLock.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CronJobLockUpsertBulk) Ignore() *CronJobLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CronJobLockUpsertBulk) DoNothing() *CronJobLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CronJobLockCreateBulk.OnConflict
// documentation for more info.
func (u *CronJobLockUpsertBulk) Update(set func(*CronJobLockUpsert)) *CronJobLockUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CronJobLockUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CronJobLockUpsertBulk) SetUpdatedAt(v time.Time) *CronJobLockUpsertBulk {
	return u.Update(func(s *CronJobLockUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CronJobLockUpsertBulk) UpdateUpdatedAt() *CronJobLockUpsertBulk {
	return u.Update(func(s *CronJobLockUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetJobName sets the "job_name" field.
func (u *CronJobLockUpsertBulk) SetJobName(v string) *CronJobLockUpsertBulk {
	return u.Update(func(s *CronJobLockUpsert) {
		s.SetJobName(v)
	})
}

// UpdateJobName sets the "job_name" field to the value that was provided on create.
func (u *CronJobLockUpsertBulk) UpdateJobName() *CronJobLockUpsertBulk {
	return u.Update(func(s *CronJobLockUpsert) {
		s.UpdateJobName()
	})
}

// SetJobIdentifier sets the "job_identifier" field.
func (u *CronJobLockUpsertBulk) SetJobIdentifier(v string) *CronJobLockUpsertBulk {
	return u.Update(func(s *CronJobLockUpsert) {
		s.SetJobIdentifier(v)
	})
}

// UpdateJobIdentifier sets the "job_identifier" field to the value that was provided on create.
func (u *CronJobLockUpsertBulk) UpdateJobIdentifier() *CronJobLockUpsertBulk {
	return u.Update(func(s *CronJobLockUpsert) {
		s.UpdateJobIdentifier()
	})
}

// SetWorker sets the "worker" field.
func (u *CronJobLockUpsertBulk) SetWorker(v string) *CronJobLockUpsertBulk {
	return u.Update(func(s *CronJobLockUpsert) {
		s.SetWorker(v)
	})
}

// UpdateWorker sets the "worker" field to the value that was provided on create.
func (u *CronJobLockUpsertBulk) UpdateWorker() *CronJobLockUpsertBulk {
	return u.Update(func(s *CronJobLockUpsert) {
		s.UpdateWorker()
	})
}

// SetStatus sets the "status" field.
func (u *CronJobLockUpsertBulk) SetStatus(v string) *CronJobLockUpsertBulk {
	return u.Update(func(s *CronJobLockUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CronJobLockUpsertBulk) UpdateStatus() *CronJobLockUpsertBulk {
	return u.Update(func(s *CronJobLockUpsert) {
		s.UpdateStatus()
	})
}

// Exec executes the query.
func (u *CronJobLockUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CronJobLockCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CronJobLockCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CronJobLockUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
