// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bbedward/gocron-ent-lock/v2/ent/cronjoblock"
	"github.com/bbedward/gocron-ent-lock/v2/ent/predicate"
)

// CronJobLockUpdate is the builder for updating CronJobLock entities.
type CronJobLockUpdate struct {
	config
	hooks     []Hook
	mutation  *CronJobLockMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the CronJobLockUpdate builder.
func (cjlu *CronJobLockUpdate) Where(ps ...predicate.CronJobLock) *CronJobLockUpdate {
	cjlu.mutation.Where(ps...)
	return cjlu
}

// SetUpdatedAt sets the "updated_at" field.
func (cjlu *CronJobLockUpdate) SetUpdatedAt(t time.Time) *CronJobLockUpdate {
	cjlu.mutation.SetUpdatedAt(t)
	return cjlu
}

// SetJobName sets the "job_name" field.
func (cjlu *CronJobLockUpdate) SetJobName(s string) *CronJobLockUpdate {
	cjlu.mutation.SetJobName(s)
	return cjlu
}

// SetNillableJobName sets the "job_name" field if the given value is not nil.
func (cjlu *CronJobLockUpdate) SetNillableJobName(s *string) *CronJobLockUpdate {
	if s != nil {
		cjlu.SetJobName(*s)
	}
	return cjlu
}

// SetJobIdentifier sets the "job_identifier" field.
func (cjlu *CronJobLockUpdate) SetJobIdentifier(s string) *CronJobLockUpdate {
	cjlu.mutation.SetJobIdentifier(s)
	return cjlu
}

// SetNillableJobIdentifier sets the "job_identifier" field if the given value is not nil.
func (cjlu *CronJobLockUpdate) SetNillableJobIdentifier(s *string) *CronJobLockUpdate {
	if s != nil {
		cjlu.SetJobIdentifier(*s)
	}
	return cjlu
}

// SetWorker sets the "worker" field.
func (cjlu *CronJobLockUpdate) SetWorker(s string) *CronJobLockUpdate {
	cjlu.mutation.SetWorker(s)
	return cjlu
}

// SetNillableWorker sets the "worker" field if the given value is not nil.
func (cjlu *CronJobLockUpdate) SetNillableWorker(s *string) *CronJobLockUpdate {
	if s != nil {
		cjlu.SetWorker(*s)
	}
	return cjlu
}

// SetStatus sets the "status" field.
func (cjlu *CronJobLockUpdate) SetStatus(s string) *CronJobLockUpdate {
	cjlu.mutation.SetStatus(s)
	return cjlu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cjlu *CronJobLockUpdate) SetNillableStatus(s *string) *CronJobLockUpdate {
	if s != nil {
		cjlu.SetStatus(*s)
	}
	return cjlu
}

// Mutation returns the CronJobLockMutation object of the builder.
func (cjlu *CronJobLockUpdate) Mutation() *CronJobLockMutation {
	return cjlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cjlu *CronJobLockUpdate) Save(ctx context.Context) (int, error) {
	cjlu.defaults()
	return withHooks(ctx, cjlu.sqlSave, cjlu.mutation, cjlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cjlu *CronJobLockUpdate) SaveX(ctx context.Context) int {
	affected, err := cjlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cjlu *CronJobLockUpdate) Exec(ctx context.Context) error {
	_, err := cjlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjlu *CronJobLockUpdate) ExecX(ctx context.Context) {
	if err := cjlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cjlu *CronJobLockUpdate) defaults() {
	if _, ok := cjlu.mutation.UpdatedAt(); !ok {
		v := cronjoblock.UpdateDefaultUpdatedAt()
		cjlu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cjlu *CronJobLockUpdate) check() error {
	if v, ok := cjlu.mutation.JobName(); ok {
		if err := cronjoblock.JobNameValidator(v); err != nil {
			return &ValidationError{Name: "job_name", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.job_name": %w`, err)}
		}
	}
	if v, ok := cjlu.mutation.JobIdentifier(); ok {
		if err := cronjoblock.JobIdentifierValidator(v); err != nil {
			return &ValidationError{Name: "job_identifier", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.job_identifier": %w`, err)}
		}
	}
	if v, ok := cjlu.mutation.Worker(); ok {
		if err := cronjoblock.WorkerValidator(v); err != nil {
			return &ValidationError{Name: "worker", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.worker": %w`, err)}
		}
	}
	if v, ok := cjlu.mutation.Status(); ok {
		if err := cronjoblock.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cjlu *CronJobLockUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CronJobLockUpdate {
	cjlu.modifiers = append(cjlu.modifiers, modifiers...)
	return cjlu
}

func (cjlu *CronJobLockUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cjlu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cronjoblock.Table, cronjoblock.Columns, sqlgraph.NewFieldSpec(cronjoblock.FieldID, field.TypeInt))
	if ps := cjlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cjlu.mutation.UpdatedAt(); ok {
		_spec.SetField(cronjoblock.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cjlu.mutation.JobName(); ok {
		_spec.SetField(cronjoblock.FieldJobName, field.TypeString, value)
	}
	if value, ok := cjlu.mutation.JobIdentifier(); ok {
		_spec.SetField(cronjoblock.FieldJobIdentifier, field.TypeString, value)
	}
	if value, ok := cjlu.mutation.Worker(); ok {
		_spec.SetField(cronjoblock.FieldWorker, field.TypeString, value)
	}
	if value, ok := cjlu.mutation.Status(); ok {
		_spec.SetField(cronjoblock.FieldStatus, field.TypeString, value)
	}
	_spec.AddModifiers(cjlu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, cjlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cronjoblock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cjlu.mutation.done = true
	return n, nil
}

// CronJobLockUpdateOne is the builder for updating a single CronJobLock entity.
type CronJobLockUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *CronJobLockMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (cjluo *CronJobLockUpdateOne) SetUpdatedAt(t time.Time) *CronJobLockUpdateOne {
	cjluo.mutation.SetUpdatedAt(t)
	return cjluo
}

// SetJobName sets the "job_name" field.
func (cjluo *CronJobLockUpdateOne) SetJobName(s string) *CronJobLockUpdateOne {
	cjluo.mutation.SetJobName(s)
	return cjluo
}

// SetNillableJobName sets the "job_name" field if the given value is not nil.
func (cjluo *CronJobLockUpdateOne) SetNillableJobName(s *string) *CronJobLockUpdateOne {
	if s != nil {
		cjluo.SetJobName(*s)
	}
	return cjluo
}

// SetJobIdentifier sets the "job_identifier" field.
func (cjluo *CronJobLockUpdateOne) SetJobIdentifier(s string) *CronJobLockUpdateOne {
	cjluo.mutation.SetJobIdentifier(s)
	return cjluo
}

// SetNillableJobIdentifier sets the "job_identifier" field if the given value is not nil.
func (cjluo *CronJobLockUpdateOne) SetNillableJobIdentifier(s *string) *CronJobLockUpdateOne {
	if s != nil {
		cjluo.SetJobIdentifier(*s)
	}
	return cjluo
}

// SetWorker sets the "worker" field.
func (cjluo *CronJobLockUpdateOne) SetWorker(s string) *CronJobLockUpdateOne {
	cjluo.mutation.SetWorker(s)
	return cjluo
}

// SetNillableWorker sets the "worker" field if the given value is not nil.
func (cjluo *CronJobLockUpdateOne) SetNillableWorker(s *string) *CronJobLockUpdateOne {
	if s != nil {
		cjluo.SetWorker(*s)
	}
	return cjluo
}

// SetStatus sets the "status" field.
func (cjluo *CronJobLockUpdateOne) SetStatus(s string) *CronJobLockUpdateOne {
	cjluo.mutation.SetStatus(s)
	return cjluo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cjluo *CronJobLockUpdateOne) SetNillableStatus(s *string) *CronJobLockUpdateOne {
	if s != nil {
		cjluo.SetStatus(*s)
	}
	return cjluo
}

// Mutation returns the CronJobLockMutation object of the builder.
func (cjluo *CronJobLockUpdateOne) Mutation() *CronJobLockMutation {
	return cjluo.mutation
}

// Where appends a list predicates to the CronJobLockUpdate builder.
func (cjluo *CronJobLockUpdateOne) Where(ps ...predicate.CronJobLock) *CronJobLockUpdateOne {
	cjluo.mutation.Where(ps...)
	return cjluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cjluo *CronJobLockUpdateOne) Select(field string, fields ...string) *CronJobLockUpdateOne {
	cjluo.fields = append([]string{field}, fields...)
	return cjluo
}

// Save executes the query and returns the updated CronJobLock entity.
func (cjluo *CronJobLockUpdateOne) Save(ctx context.Context) (*CronJobLock, error) {
	cjluo.defaults()
	return withHooks(ctx, cjluo.sqlSave, cjluo.mutation, cjluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cjluo *CronJobLockUpdateOne) SaveX(ctx context.Context) *CronJobLock {
	node, err := cjluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cjluo *CronJobLockUpdateOne) Exec(ctx context.Context) error {
	_, err := cjluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cjluo *CronJobLockUpdateOne) ExecX(ctx context.Context) {
	if err := cjluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cjluo *CronJobLockUpdateOne) defaults() {
	if _, ok := cjluo.mutation.UpdatedAt(); !ok {
		v := cronjoblock.UpdateDefaultUpdatedAt()
		cjluo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cjluo *CronJobLockUpdateOne) check() error {
	if v, ok := cjluo.mutation.JobName(); ok {
		if err := cronjoblock.JobNameValidator(v); err != nil {
			return &ValidationError{Name: "job_name", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.job_name": %w`, err)}
		}
	}
	if v, ok := cjluo.mutation.JobIdentifier(); ok {
		if err := cronjoblock.JobIdentifierValidator(v); err != nil {
			return &ValidationError{Name: "job_identifier", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.job_identifier": %w`, err)}
		}
	}
	if v, ok := cjluo.mutation.Worker(); ok {
		if err := cronjoblock.WorkerValidator(v); err != nil {
			return &ValidationError{Name: "worker", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.worker": %w`, err)}
		}
	}
	if v, ok := cjluo.mutation.Status(); ok {
		if err := cronjoblock.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "CronJobLock.status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (cjluo *CronJobLockUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *CronJobLockUpdateOne {
	cjluo.modifiers = append(cjluo.modifiers, modifiers...)
	return cjluo
}

func (cjluo *CronJobLockUpdateOne) sqlSave(ctx context.Context) (_node *CronJobLock, err error) {
	if err := cjluo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cronjoblock.Table, cronjoblock.Columns, sqlgraph.NewFieldSpec(cronjoblock.FieldID, field.TypeInt))
	id, ok := cjluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CronJobLock.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cjluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cronjoblock.FieldID)
		for _, f := range fields {
			if !cronjoblock.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cronjoblock.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cjluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cjluo.mutation.UpdatedAt(); ok {
		_spec.SetField(cronjoblock.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cjluo.mutation.JobName(); ok {
		_spec.SetField(cronjoblock.FieldJobName, field.TypeString, value)
	}
	if value, ok := cjluo.mutation.JobIdentifier(); ok {
		_spec.SetField(cronjoblock.FieldJobIdentifier, field.TypeString, value)
	}
	if value, ok := cjluo.mutation.Worker(); ok {
		_spec.SetField(cronjoblock.FieldWorker, field.TypeString, value)
	}
	if value, ok := cjluo.mutation.Status(); ok {
		_spec.SetField(cronjoblock.FieldStatus, field.TypeString, value)
	}
	_spec.AddModifiers(cjluo.modifiers...)
	_node = &CronJobLock{config: cjluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cjluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cronjoblock.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cjluo.mutation.done = true
	return _node, nil
}
