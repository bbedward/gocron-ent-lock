// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bbedward/gocron-ent-lock/v2/ent/cronjoblock"
	"github.com/bbedward/gocron-ent-lock/v2/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCronJobLock = "CronJobLock"
)

// CronJobLockMutation represents an operation that mutates the CronJobLock nodes in the graph.
type CronJobLockMutation struct {
	config
	op             Op
	typ            string
	id             *int
	created_at     *time.Time
	updated_at     *time.Time
	job_name       *string
	job_identifier *string
	worker         *string
	status         *string
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*CronJobLock, error)
	predicates     []predicate.CronJobLock
}

var _ ent.Mutation = (*CronJobLockMutation)(nil)

// cronjoblockOption allows management of the mutation configuration using functional options.
type cronjoblockOption func(*CronJobLockMutation)

// newCronJobLockMutation creates new mutation for the CronJobLock entity.
func newCronJobLockMutation(c config, op Op, opts ...cronjoblockOption) *CronJobLockMutation {
	m := &CronJobLockMutation{
		config:        c,
		op:            op,
		typ:           TypeCronJobLock,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCronJobLockID sets the ID field of the mutation.
func withCronJobLockID(id int) cronjoblockOption {
	return func(m *CronJobLockMutation) {
		var (
			err   error
			once  sync.Once
			value *CronJobLock
		)
		m.oldValue = func(ctx context.Context) (*CronJobLock, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CronJobLock.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCronJobLock sets the old CronJobLock of the mutation.
func withCronJobLock(node *CronJobLock) cronjoblockOption {
	return func(m *CronJobLockMutation) {
		m.oldValue = func(context.Context) (*CronJobLock, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CronJobLockMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CronJobLockMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CronJobLock entities.
func (m *CronJobLockMutation) SetID(id int) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CronJobLockMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CronJobLockMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CronJobLock.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *CronJobLockMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *CronJobLockMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the CronJobLock entity.
// If the CronJobLock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CronJobLockMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *CronJobLockMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *CronJobLockMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *CronJobLockMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the CronJobLock entity.
// If the CronJobLock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CronJobLockMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *CronJobLockMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetJobName sets the "job_name" field.
func (m *CronJobLockMutation) SetJobName(s string) {
	m.job_name = &s
}

// JobName returns the value of the "job_name" field in the mutation.
func (m *CronJobLockMutation) JobName() (r string, exists bool) {
	v := m.job_name
	if v == nil {
		return
	}
	return *v, true
}

// OldJobName returns the old "job_name" field's value of the CronJobLock entity.
// If the CronJobLock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CronJobLockMutation) OldJobName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJobName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJobName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobName: %w", err)
	}
	return oldValue.JobName, nil
}

// ResetJobName resets all changes to the "job_name" field.
func (m *CronJobLockMutation) ResetJobName() {
	m.job_name = nil
}

// SetJobIdentifier sets the "job_identifier" field.
func (m *CronJobLockMutation) SetJobIdentifier(s string) {
	m.job_identifier = &s
}

// JobIdentifier returns the value of the "job_identifier" field in the mutation.
func (m *CronJobLockMutation) JobIdentifier() (r string, exists bool) {
	v := m.job_identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldJobIdentifier returns the old "job_identifier" field's value of the CronJobLock entity.
// If the CronJobLock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CronJobLockMutation) OldJobIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJobIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJobIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJobIdentifier: %w", err)
	}
	return oldValue.JobIdentifier, nil
}

// ResetJobIdentifier resets all changes to the "job_identifier" field.
func (m *CronJobLockMutation) ResetJobIdentifier() {
	m.job_identifier = nil
}

// SetWorker sets the "worker" field.
func (m *CronJobLockMutation) SetWorker(s string) {
	m.worker = &s
}

// Worker returns the value of the "worker" field in the mutation.
func (m *CronJobLockMutation) Worker() (r string, exists bool) {
	v := m.worker
	if v == nil {
		return
	}
	return *v, true
}

// OldWorker returns the old "worker" field's value of the CronJobLock entity.
// If the CronJobLock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CronJobLockMutation) OldWorker(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWorker is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWorker requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWorker: %w", err)
	}
	return oldValue.Worker, nil
}

// ResetWorker resets all changes to the "worker" field.
func (m *CronJobLockMutation) ResetWorker() {
	m.worker = nil
}

// SetStatus sets the "status" field.
func (m *CronJobLockMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *CronJobLockMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the CronJobLock entity.
// If the CronJobLock object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CronJobLockMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *CronJobLockMutation) ResetStatus() {
	m.status = nil
}

// Where appends a list predicates to the CronJobLockMutation builder.
func (m *CronJobLockMutation) Where(ps ...predicate.CronJobLock) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CronJobLockMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CronJobLockMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CronJobLock, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CronJobLockMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CronJobLockMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CronJobLock).
func (m *CronJobLockMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CronJobLockMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.created_at != nil {
		fields = append(fields, cronjoblock.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, cronjoblock.FieldUpdatedAt)
	}
	if m.job_name != nil {
		fields = append(fields, cronjoblock.FieldJobName)
	}
	if m.job_identifier != nil {
		fields = append(fields, cronjoblock.FieldJobIdentifier)
	}
	if m.worker != nil {
		fields = append(fields, cronjoblock.FieldWorker)
	}
	if m.status != nil {
		fields = append(fields, cronjoblock.FieldStatus)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CronJobLockMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cronjoblock.FieldCreatedAt:
		return m.CreatedAt()
	case cronjoblock.FieldUpdatedAt:
		return m.UpdatedAt()
	case cronjoblock.FieldJobName:
		return m.JobName()
	case cronjoblock.FieldJobIdentifier:
		return m.JobIdentifier()
	case cronjoblock.FieldWorker:
		return m.Worker()
	case cronjoblock.FieldStatus:
		return m.Status()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CronJobLockMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cronjoblock.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case cronjoblock.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case cronjoblock.FieldJobName:
		return m.OldJobName(ctx)
	case cronjoblock.FieldJobIdentifier:
		return m.OldJobIdentifier(ctx)
	case cronjoblock.FieldWorker:
		return m.OldWorker(ctx)
	case cronjoblock.FieldStatus:
		return m.OldStatus(ctx)
	}
	return nil, fmt.Errorf("unknown CronJobLock field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CronJobLockMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cronjoblock.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case cronjoblock.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case cronjoblock.FieldJobName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobName(v)
		return nil
	case cronjoblock.FieldJobIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJobIdentifier(v)
		return nil
	case cronjoblock.FieldWorker:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWorker(v)
		return nil
	case cronjoblock.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	}
	return fmt.Errorf("unknown CronJobLock field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CronJobLockMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CronJobLockMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CronJobLockMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CronJobLock numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CronJobLockMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CronJobLockMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CronJobLockMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CronJobLock nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CronJobLockMutation) ResetField(name string) error {
	switch name {
	case cronjoblock.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case cronjoblock.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case cronjoblock.FieldJobName:
		m.ResetJobName()
		return nil
	case cronjoblock.FieldJobIdentifier:
		m.ResetJobIdentifier()
		return nil
	case cronjoblock.FieldWorker:
		m.ResetWorker()
		return nil
	case cronjoblock.FieldStatus:
		m.ResetStatus()
		return nil
	}
	return fmt.Errorf("unknown CronJobLock field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CronJobLockMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CronJobLockMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CronJobLockMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CronJobLockMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CronJobLockMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CronJobLockMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CronJobLockMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CronJobLock unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CronJobLockMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CronJobLock edge %s", name)
}
